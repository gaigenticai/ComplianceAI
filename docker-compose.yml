networks:
  kyc-network:
    driver: bridge
    ipam:
      config:
      - subnet: 172.20.0.0/16
services:
  decision-agent:
    build:
      context: ./python-agents/decision-orchestration-agent
      dockerfile: Dockerfile
    container_name: kyc-decision-agent
    depends_on:
      kafka:
        condition: service_healthy
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
    - POSTGRES_HOST=postgres
    - POSTGRES_PORT=5432
    - POSTGRES_DB=${POSTGRES_DB:-kyc_db}
    - POSTGRES_USER=${POSTGRES_USER:-postgres}
    - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-password}
    - REDIS_HOST=redis
    - REDIS_PORT=6379
    - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
    - OPENAI_API_KEY=${OPENAI_API_KEY}
    - REQUIRE_AUTH=${REQUIRE_AUTH:-false}
    healthcheck:
      interval: 30s
      retries: 3
      test:
      - CMD
      - curl
      - -f
      - http://localhost:8003/health
      timeout: 10s
    hostname: decision-agent
    networks:
    - kyc-network
    restart: unless-stopped
  intake-agent:
    build:
      context: ./python-agents/intake-processing-agent
      dockerfile: Dockerfile
    container_name: kyc-intake-agent
    depends_on:
      kafka:
        condition: service_healthy
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
    - POSTGRES_HOST=postgres
    - POSTGRES_PORT=5432
    - POSTGRES_DB=${POSTGRES_DB:-kyc_db}
    - POSTGRES_USER=${POSTGRES_USER:-postgres}
    - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-password}
    - REDIS_HOST=redis
    - REDIS_PORT=6379
    - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
    - OPENAI_API_KEY=${OPENAI_API_KEY}
    - VISION_MODEL=${VISION_MODEL:-gpt-4-vision-preview}
    - REQUIRE_AUTH=${REQUIRE_AUTH:-false}
    healthcheck:
      interval: 30s
      retries: 3
      test:
      - CMD
      - curl
      - -f
      - http://localhost:8001/health
      timeout: 10s
    hostname: intake-agent
    networks:
    - kyc-network
    restart: unless-stopped
  intelligence-agent:
    build:
      context: ./python-agents/intelligence-compliance-agent
      dockerfile: Dockerfile
    container_name: kyc-intelligence-agent
    depends_on:
      kafka:
        condition: service_healthy
      postgres:
        condition: service_healthy
      qdrant:
        condition: service_started
      redis:
        condition: service_healthy
    environment:
    - POSTGRES_HOST=postgres
    - POSTGRES_PORT=5432
    - POSTGRES_DB=${POSTGRES_DB:-kyc_db}
    - POSTGRES_USER=${POSTGRES_USER:-postgres}
    - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-password}
    - REDIS_HOST=redis
    - REDIS_PORT=6379
    - QDRANT_HOST=qdrant
    - QDRANT_PORT=6333
    - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
    - OPENAI_API_KEY=${OPENAI_API_KEY}
    - REQUIRE_AUTH=${REQUIRE_AUTH:-false}
    healthcheck:
      interval: 30s
      retries: 3
      test:
      - CMD
      - curl
      - -f
      - http://localhost:8002/health
      timeout: 10s
    hostname: intelligence-agent
    networks:
    - kyc-network
    restart: unless-stopped
  kafka:
    container_name: kyc-kafka
    depends_on:
    - zookeeper
    environment:
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_BROKER_ID: 1
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_NUM_PARTITIONS: 3
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
    healthcheck:
      interval: 30s
      retries: 5
      test:
      - CMD
      - kafka-topics
      - --bootstrap-server
      - localhost:29092
      - --list
      timeout: 10s
    hostname: kafka
    image: confluentinc/cp-kafka:7.4.0
    networks:
    - kyc-network
    ports:
    - 9092:9092
    restart: unless-stopped
    volumes:
    - kafka-data:/var/lib/kafka/data
  mongodb:
    container_name: kyc-mongodb
    environment:
      MONGO_INITDB_DATABASE: ${MONGO_DB:-kyc_db}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD:-password}
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_USER:-admin}
    healthcheck:
      interval: 10s
      retries: 5
      test:
      - CMD
      - mongosh
      - --eval
      - db.adminCommand('ping')
      timeout: 5s
    hostname: mongodb
    image: mongo:7-jammy
    networks:
    - kyc-network
    ports:
    - 27017:27017
    restart: unless-stopped
    volumes:
    - mongodb-data:/data/db
    - ./database/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
  postgres:
    container_name: kyc-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-kyc_db}
      POSTGRES_INITDB_ARGS: --encoding=UTF-8 --lc-collate=C --lc-ctype=C
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
    healthcheck:
      interval: 10s
      retries: 5
      test:
      - CMD-SHELL
      - pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-kyc_db}
      timeout: 5s
    hostname: postgres
    image: postgres:15-alpine
    networks:
    - kyc-network
    ports:
    - 5433:5432
    restart: unless-stopped
    volumes:
    - postgres-data:/var/lib/postgresql/data
    - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
  qdrant:
    container_name: kyc-qdrant
    environment:
    - QDRANT__SERVICE__HTTP_PORT=6333
    - QDRANT__SERVICE__GRPC_PORT=6334
    - QDRANT__LOG_LEVEL=INFO
    hostname: qdrant
    image: qdrant/qdrant:v1.7.4
    networks:
    - kyc-network
    ports:
    - 6335-6336:6333-6334
    restart: unless-stopped
    volumes:
    - qdrant-data:/qdrant/storage
  redis:
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    container_name: kyc-redis
    healthcheck:
      interval: 10s
      retries: 5
      test:
      - CMD
      - redis-cli
      - ping
      timeout: 5s
    hostname: redis
    image: redis:7-alpine
    networks:
    - kyc-network
    ports:
    - 6380:6379
    restart: unless-stopped
    volumes:
    - redis-data:/data
  regulatory-intel-agent:
    build:
      context: ./python-agents/regulatory-intel-agent
      dockerfile: Dockerfile
    container_name: kyc-regulatory-intel-agent
    depends_on:
      kafka:
        condition: service_healthy
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
    - POSTGRES_HOST=postgres
    - POSTGRES_PORT=5432
    - POSTGRES_DB=${POSTGRES_DB:-kyc_db}
    - POSTGRES_USER=${POSTGRES_USER:-postgres}
    - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-password}
    - REDIS_HOST=redis
    - REDIS_PORT=6379
    - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
    - OPENAI_API_KEY=${OPENAI_API_KEY}
    - REQUIRE_AUTH=${REQUIRE_AUTH:-false}
    - REG_INTEL_FEEDS=${REG_INTEL_FEEDS:-}
    - REPORT_TEMPLATES_PATH=${REPORT_TEMPLATES_PATH:-/app/templates}
    - EBA_API_CREDENTIALS=${EBA_API_CREDENTIALS:-}
    - SFTP_CONFIG=${SFTP_CONFIG:-}
    - REGULATORY_POLLING_INTERVAL=${REGULATORY_POLLING_INTERVAL:-3600}
    - REGULATORY_RETRY_ATTEMPTS=${REGULATORY_RETRY_ATTEMPTS:-3}
    - REGULATORY_BACKOFF_FACTOR=${REGULATORY_BACKOFF_FACTOR:-2}
    healthcheck:
      interval: 30s
      retries: 3
      test:
      - CMD
      - curl
      - -f
      - http://localhost:8004/health
      timeout: 10s
    hostname: regulatory-intel-agent
    networks:
    - kyc-network
    restart: unless-stopped
    volumes:
    - ./regulatory-templates:/app/templates:ro
    - ./regulatory-data:/app/data
  web-interface:
    build:
      context: ./python-web-interface
      dockerfile: Dockerfile
    container_name: kyc-web-interface
    depends_on:
      decision-agent:
        condition: service_healthy
      intake-agent:
        condition: service_healthy
      intelligence-agent:
        condition: service_healthy
      regulatory-intel-agent:
        condition: service_healthy
      kafka:
        condition: service_healthy
      mongodb:
        condition: service_healthy
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
    - SERVER_HOST=0.0.0.0
    - SERVER_PORT=8000
    - POSTGRES_URL=postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-password}@postgres:5432/${POSTGRES_DB:-kyc_db}
    - POSTGRES_HOST=postgres
    - POSTGRES_PORT=5432
    - POSTGRES_DB=${POSTGRES_DB:-kyc_db}
    - POSTGRES_USER=${POSTGRES_USER:-postgres}
    - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-password}
    - REDIS_URL=redis://redis:6379
    - REDIS_HOST=redis
    - REDIS_PORT=6379
    - QDRANT_HOST=qdrant
    - QDRANT_PORT=6333
    - MONGODB_URL=mongodb://${MONGO_USER:-admin}:${MONGO_PASSWORD:-password}@mongodb:27017/${MONGO_DB:-kyc_db}?authSource=admin
    - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
    - JWT_SECRET=${JWT_SECRET:-your-secret-key-change-in-production}
    - RUST_LOG=${RUST_LOG:-info}
    - REQUIRE_AUTH=${REQUIRE_AUTH:-false}
    - INTAKE_AGENT_URL=http://intake-agent:8001
    - INTELLIGENCE_AGENT_URL=http://intelligence-agent:8002
    - DECISION_AGENT_URL=http://decision-agent:8003
    - REGULATORY_INTEL_AGENT_URL=http://regulatory-intel-agent:8004
    healthcheck:
      interval: 30s
      retries: 3
      test:
      - CMD
      - curl
      - -f
      - http://localhost:8000/health
      timeout: 10s
    hostname: web-interface
    networks:
    - kyc-network
    ports:
    - 8001:8000
    restart: unless-stopped
  zookeeper:
    container_name: kyc-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    hostname: zookeeper
    image: confluentinc/cp-zookeeper:7.4.0
    networks:
    - kyc-network
    ports:
    - 2181:2181
    restart: unless-stopped
    volumes:
    - zookeeper-data:/var/lib/zookeeper/data
    - zookeeper-logs:/var/lib/zookeeper/log
volumes:
  kafka-data:
    driver: local
  mongodb-data:
    driver: local
  postgres-data:
    driver: local
  qdrant-data:
    driver: local
  redis-data:
    driver: local
  zookeeper-data:
    driver: local
  zookeeper-logs:
    driver: local
